{"version":3,"sources":["components/main/main.js","components/header/header.js","components/footer/footer.js","components/Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","submitHandler","e","a","preventDefault","state","method","fetch","url","raw","json","data","formData","count","results","change","onChange","target","name","value","setState","handleInputUrl","handleIputMethod","console","log","handleReq","hits","methodUrl","push","this","finalResult","onSubmit","placeholder","id","type","React","Component","Header","Footer","Results","src","theme","App","urlHandler","result","headers","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba3e6aea.chunk.js","sourcesContent":["import React from 'react';\nimport './main.scss';\n\nexport default class Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: \"\",\n            method: \"get\",\n            hits: []\n        };\n\n    }\n    submitHandler= async (e)=>{\n        e.preventDefault();\n        // url :   https://swapi.dev/api/people/\n    \n        if(this.state.method == 'get'){\n\n          let raw = await fetch(this.state.url);\n          let data = await raw.json();\n          this.props.formData(data.count,data.results);\n        }\n    \n    }\n  \n    change = e => {\n        this.props.onChange({ [e.target.name]: e.target.value });\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n    handleInputUrl = e => {\n        e.preventDefault();\n        this.setState({ url: e.target.value });\n    }\n    handleIputMethod = (e) => {\n        e.preventDefault();\n        this.setState({ method: e.target.value });\n        console.log(this.state)\n\n    }\n    handleReq = e => {\n        e.preventDefault();\n        let hits = this.state.hits;\n\n        let methodUrl = <li>\n            Method: {this.state.method}<br />\n            Url: {this.state.url}\n        </li>\n        hits.push(methodUrl)\n        this.setState({ hits })\n       \n        // console.log('this.state')\n        // console.log('this.state.hits', this.state.hits)\n    }\n\n\n    render() {\n        console.log('HHHH', this.state.url);\n        let finalResult = this.state.hits;\n        console.log('finalResult', finalResult);\n        return (\n            <section>\n                <form onSubmit={this.submitHandler}>\n                    <label>URL: <input\n                        name=\"url\"\n                        placeholder=\"API\"\n                        value={this.state.url}\n                        onChange={this.handleInputUrl}\n                    /></label>\n                    {/* <button onClick={this.handleReq}>GO</button> */}\n                    <button >GO</button>\n\n                    <div id=\"btns\" onChange={this.handleIputMethod}>\n                        <label>GET\n                      <input type=\"radio\" value=\"get\" name=\"method\" />\n                        </label>\n\n                        <label>POST\n                <input type=\"radio\" value=\"post\" name=\"method\" />\n                        </label>\n                        <label>UPDATE\n                <input type=\"radio\" value=\"put\" name=\"method\" />\n                        </label>\n                        <label>DELETE\n                <input type=\"radio\" value=\"delete\" name=\"method\" />\n                        </label>\n\n                    </div>\n                </form>\n\n\n                <span>\n\n                    <h3>\n                        {/* {this.props.formData(this.state.hits)} */}\n                        {this.state.hits}\n                    </h3>\n                </span>\n\n            </section>\n        )\n    }\n}\n","import React from 'react';\nimport './header.scss';\n\nconst Header  = ()=>{\n  return(\n    <header>\n      <h1>RESTy</h1>\n    </header>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport './footer.scss';\n\nconst Footer  = ()=>{\n  return(\n    <footer>&copy; 2020 CodeFellows</footer>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\nimport ReactJson from 'react-json-view'\n\nclass Results extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        \n        console.log('proops', this.props);\n        return (\n            <>\n            <ReactJson src={this.props} theme=\"monokai\" />\n          </>\n        )\n    }\n}\n\nexport default Results;","import React from 'react';\n// import './App.css';\nimport Main from './components/main/main';\nimport Header from './components/header/header'\nimport Footer from './components/footer/footer'\nimport Results from './components/Results/Results'\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count:0,\n      result:[],\n      headers:[]\n      };\n    }\n    \n    urlHandler = (count,result) =>{\n      this.setState({count,result});\n    }\nrender(){\n\n  return (\n    <div className=\"App\">\n        <Header />\n        <Main formData ={this.urlHandler}/>\n        {console.log('urlData', this.state.url)}\n        <Results count={this.state.count} headers={this.state.headers} results={this.state.result} />\n        <Footer />\n\n\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}